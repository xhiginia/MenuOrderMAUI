@page "/orders"
@using MenuOrderMAUI.Models
@using MySqlConnector
@using MenuOrderMAUI.Data
@inject DatabaseService DatabaseService

<style>
    /* General Styling */
    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        margin: 0;
        padding: 0;
        background-color: #f4f4f9; /* Neutral background color */
    }

    h2 {
        text-align: center;
        color: #0077c8; /* Eye-catching blue for header */
        margin-top: 20px;
        font-size: 36px;
    }

    h3 {
        color: #28a745; /* Green for forms */
        margin-top: 30px;
    }

    .container {
        max-width: 1100px;
        margin: auto;
        padding: 20px;
    }

    /* Table Styling */
    table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
        background-color: #ffffff;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

        table thead {
            background-color: #0077c8;
            color: #ffffff; /* White text for headers */
        }

        table th, table td {
            padding: 12px 15px;
            text-align: left;
        }

        table tbody tr:nth-child(even) {
            background-color: #f9f9f9; /* Alternating row colors */
        }

        table tbody tr:hover {
            background-color: #e3f2fd; /* Subtle hover effect */
            cursor: pointer;
        }

    /* Form Styling */
    .form-container {
        margin-top: 30px;
        padding: 20px;
        background-color: #ffffff;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    select, input, button {
        display: block;
        width: 100%;
        margin-top: 10px;
        padding: 10px;
        font-size: 16px;
        border: 1px solid #ced4da;
        border-radius: 4px;
    }

    input, select {
        background-color: #f8f9fa;
    }

    button {
        background-color: #28a745;
        color: white;
        border: none;
        font-weight: bold;
        cursor: pointer;

        button:hover {
            background-color: #0056a3;
        }

    .error-message {
        color: #d32f2f; /* Bright red for errors */
        font-size: 14px;
        margin-top: 10px;
    }
</style>

<div class="container">
    <h2>Orders</h2>

    <table>
        <thead>
            <tr>
                <th>Order ID</th>
                <th>Item Name</th>
                <th>Quantity</th>
                <th>Order Date</th>
            </tr>
        </thead>
        <tbody>
            @if (Orders != null && Orders.Any())
            {
                @foreach (var order in Orders)
                {
                    <tr>
                        <td>@order.OrderID</td>
                        <td>@order.ItemName</td>
                        <td>@order.Quantity</td>
                        <td>@order.OrderDate.ToString("MM/dd/yyyy")</td> <!-- Format date -->
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="4" style="text-align: center;">No Orders Found</td>
                </tr>
            }
        </tbody>
    </table>
    <h3>Place New Order</h3>
    <div class="form-container">
        <select @bind="SelectedItemID">
            <option value="">--Select Item--</option>
            @foreach (var item in MenuItems)
            {
                <option value="@item.ItemID">@item.ItemName</option>
            }
        </select>

        <input type="number" @bind="Quantity" min="1" placeholder="Enter Quantity" />
        <button @onclick="PlaceOrder">Place Order</button>

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <p class="error-message">@ErrorMessage</p>
        }
    </div>
</div>
@code {
    private List<Orders> Orders = new();
    private List<MenuItems> MenuItems = new();
    private int SelectedItemID;
    private int Quantity;
    private string ErrorMessage = "";
    private string OrderSuccessMessage;
    protected override async Task OnInitializedAsync()
    {
        await LoadOrders();
        await LoadMenuItems();
    }

    private async Task LoadOrders()
    {
        try
        {
            Orders = await DatabaseService.GetOrdersAsync();
            ErrorMessage = ""; // Clear errors after successful load
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading orders: {ex.Message}";
        }
    }

    private async Task LoadMenuItems()
    {
        try
        {
            MenuItems = await DatabaseService.GetMenuItemsAsync();
            ErrorMessage = ""; // Clear errors after successful load
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading menu items: {ex.Message}";
        }
    }

    private async Task PlaceOrder()
    {
        if (SelectedItemID > 0 && Quantity > 0)
        {
            try
            {
                await DatabaseService.PlaceOrderAsync(SelectedItemID, Quantity);
                await LoadOrders();
                OrderSuccessMessage = $"Order for Item ID {SelectedItemID} has been placed successfully!";
                SelectedItemID = 0;
                Quantity = 0;
            }
            catch (Exception ex)
            {
                OrderSuccessMessage = string.Empty; // Clear success message on failure
                ErrorMessage = $"Error placing order: {ex.Message}";
            }
        }
        else
        {
            OrderSuccessMessage = string.Empty; // Clear success message for invalid inputs
            ErrorMessage = "Please select an item and enter a valid quantity.";
        }
    }
}