@page "/receipts"
@using MenuOrderMAUI.Models
@using MenuOrderMAUI.Data
@using MySqlConnector
@inject DatabaseService DatabaseService


<style>
    /* General Styling */
    body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background-color: #f9fafb; /* Light gray for a professional look */
    margin: 0;
    padding: 0;
    }

    .container {
    max-width: 1200px;
    margin: auto;
    padding: 20px;
    }

    h2 {
    text-align: center;
    color: #007bff; /* Blue for primary heading */
    margin-top: 20px;
    font-size: 32px;
    }

    h3 {
    color: #28a745; /* Green for subheading */
    margin-top: 30px;
    }

    /* Table Styling */
    table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px;
    background-color: #ffffff;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    table thead {
    background-color: #007bff;
    color: #ffffff;
    }

    table th, table td {
    padding: 12px;
    text-align: left;
    }

    table tbody tr:nth-child(even) {
    background-color: #f8f9fa; /* Alternating row colors */
    }

    table tbody tr:hover {
    background-color: #e2e6ea; /* Subtle hover effect */
    cursor: pointer;
    }

    /* Form Styling */
    .form-container {
    margin-top: 30px;
    padding: 20px;
    background-color: #ffffff;
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    input, button {
    display: block;
    width: 100%;
    margin-top: 10px;
    padding: 10px;
    font-size: 16px;
    border: 1px solid #ced4da;
    border-radius: 4px;
    }

    input {
    background-color: #f8f9fa;
    }

    button {
    background-color: #28a745;
    color: #ffffff;
    font-weight: bold;
    border: none;
    cursor: pointer;
    }

    button:hover {
    background-color: #218838;
    }

    /* Error Message Styling */
    .error-message {
    color: #d9534f;
    margin-top: 10px;
    font-size: 14px;
    }
</style>

<div class="container">
    <h2>Receipts</h2>

    <table>
        <thead>
            <tr>
                <th>Receipt ID</th>
                <th>Order ID</th>
                <th>Total Bill</th>
                <th>Generated Date</th>
            </tr>
        </thead>
        <tbody>
            @if (Receipts != null && Receipts.Any())
            {
                @foreach (var receipt in Receipts)
                {
                    <tr>
                        <td>@receipt.ReceiptID</td>
                        <td>@receipt.OrderID</td>
                        <td>@receipt.TotalBill.ToString("C")</td> <!-- Currency format -->
                        <td>@receipt.GenerateDate.ToString("MM/dd/yyyy")</td> <!-- Date formatting -->
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="4" style="text-align: center;">No Receipts Found</td>
                </tr>
            }
        </tbody>
    </table>

    <h3>Generate Receipt</h3>
    <div class="form-container">
        <input type="number" @bind="OrderID" min="1" placeholder="Enter Order ID" />
        <button @onclick="GenerateReceipt">Generate Receipt</button>

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <p class="error-message">@ErrorMessage</p>
        }
    </div>
</div>

@code {
    private List<Receipts> Receipts = new();
    private int OrderID;
    private string ErrorMessage = "";
    private string ReceiptSuccessMessage;


    protected override async Task OnInitializedAsync()
    {
        await LoadReceipts();
    }

    private async Task LoadReceipts()
    {
        try
        {
            Receipts = await DatabaseService.GetReceiptsAsync();
            ErrorMessage = ""; // Clear errors on success
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading receipts: {ex.Message}";
        }
    }

    private async Task GenerateReceipt()
    {
        if (OrderID > 0)
        {
            try
            {
                await DatabaseService.GenerateReceiptAsync(OrderID);
                await LoadReceipts();
                ReceiptSuccessMessage = $"Receipt for Order ID {OrderID} has been generated successfully!";
                OrderID = 0; // Reset input
            }
            catch (Exception ex)
            {
                ReceiptSuccessMessage = string.Empty; // Clear success message on failure
                ErrorMessage = $"Error generating receipt: {ex.Message}";
            }
        }
        else
        {
            ReceiptSuccessMessage = string.Empty; // Clear success message for invalid inputs
            ErrorMessage = "Please enter a valid Order ID.";
        }
    }
}